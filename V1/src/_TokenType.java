public enum _TokenType {
    // PROGR
    PROGR, PROGR_ALGO, PROGR_PROGDEFS,

    // PROCDEFS
    PROCDEFS, PROCDEFS_DIVIDER, PROGDEFS_PROC, PROGDEFS_PROGDEFS, PROCDEFS_EPSILON,

    // PROC
    PROC, PROC_PROCEDURE, PROC_DIGITS, PROC_STARTBRACKET, PROC_PROGR, PROC_ENDBRACKET,

    // DIGITS
    DIGIT, DIGITS_D, DIGITS_MORE,

    // D
    D, D_1, D_2, D_3, D_4, D_5, D_6, D_7, D_8, D_9, D_0,

    // MORE
    MORE, MORE_DIGITS, MORE_EPSILON,

    // ALGO
    ALGO, ALGO_INSTR, ALGO_COMMENT, ALGO_SEQ,

    // SEQ
    SEQ, SEQ_DIVIDER, SEQ_ALGO, SEQ_EPSILON,

    // INSTR
    INSTR, INSTR_INPUT, INSTR_OUTPUT, INSTR_ASSIGN, INSTR_CALL, INSTR_LOOP, INSTR_BRANCH, INSTR_HALT,

    // CALL
    CALL, CALL_CALL, CALL_PROCEDURE, CALL_DIGITS,

    // ASSIGN
    ASSING, ASSIGN_NUMVAR, ASSIGN_ASSIGN, ASSIGN_NUMEXPR, ASSIGN_BOOLVAR, ASSIGN_BOOLXPR, ASSIGN_STRINGV, ASSIGN_STRI,

    // LOOP
    LOOP, LOOP_WHILE, LOOP_OPENPARENTHESIS, LOOP_BOOLEXPR, LOOP_CLOSEPARENTHESIS, LOOP_START, LOOP_ALGO, LOOP_END,

    // BRANCH
    BRANCH, BRANCH_IF, BRANCH_OPENPARENTHESIS, BRANCH_BOOLEXPR, BRANCH_CLOSEPARENTHESIS, BRANCH_THEN, BRANCH_START, BRANCH_ALGO, BRANCH_END, BRANCH_ELSE,

    // ELSE
    ELSE, ELSE_ELSE, ELSE_START, ELSE_ALGO, ELSE_END,

    // NUMVAR
    NUMVAR, NUMVAR_NUMERIC, NUMVAR_DIGITS,

    // BOOLVAR
    BOOLVAR, BOOLVAR_BOOLEAN, BOOLVAR_DIGITS,

    // STRINGV
    STRINGV, STRINGV_STRINGISH, STRINGV_DIGITS,

    // NUMEXPR
    NUMEXPR, NUMEXPR_ADDITION, NUMEXPR_MULTIPLICATION, NUMEXPR_DIVISION, NUMEXPR_OPENPARENTHESIS, NUMEXPR_NUMEXPR, NUMEXPR_CLOSEPARENTHESIS, NUMEXPR_NUMVAR, NUMEXPR_DECNUM, NUMEXPR_SEPARATOR,

    // DECNUM
    DECNUM, DECNUM_DEFAULT, DECNUM_NEG, DECNUM_POS,

    // NEG
    NEG, NEG_MINUS, NEG_POS,

    // POS
    POS, POS_INT, POS_FLOATPOINT, POS_D1, POS_D2,

    // INT
    INT, INT_1MORE, INT_2MORE, INT_3MORE, INT_4MORE, INT_5MORE, INT_6MORE, INT_7MORE, INT_8MORE, INT_9MORE,

    // BOOLEXPR
    BOOLEXPR, BOOLEXPR_LOGIC, BOOLEXPR_CMPR,

    // LOGIC
    LOGIC, LOGIC_AND, LOGIC_OR, LOGIC_NOT, LOGIC_OPENPARENTHESIS, LOGIC_BOOLEXPR, LOGIC_CLOSEPARENTHESIS, LOGIC_BOOLVAR, LOGIC_TRUE, LOGIC_FALSE, LOGIC_SEPARATOR,

    // CMPR
    CMPR, CMPR_EQUAL, CMPR_GREATERTHAN, CMPR_LESSTHAN, CMPR_OPENPARENTHESIS, CMPR_NUMEXPR, CMPR_CLOSEPARENTHESIS, CMPR_SEPARATOR,

    // STRI
    STRI, STRI_OPENDOUBLEQOUTES, STRI_C1, STRI_C2, STRI_C3, STRI_C4, STRI_C5, STRI_C6, STRI_C7, STRI_C8, STRI_C9, STRI_C10, STRI_C11, STRI_C12, STRI_C13, STRI_C14, STRI_C15, STRI_CLOSEDOUBLEQOUTES, 

    // C
    C, C_USERDEFINED,

    //CONNEMT
    COMMENT, COMMENT_OPENSTAR, COMMENT_C1, COMMENT_C2, COMMENT_C3, COMMENT_C4, COMMENT_C5, COMMENT_C6, COMMENT_C7, COMMENT_C8, COMMENT_C9, COMMENT_C10, COMMENT_C11, COMMENT_C12, COMMENT_C13, COMMENT_C14, COMMENT_C15, COMMENT_CLOSESTAR,

    // INPUT
    INPUT, INPUT_GET, INPUT_VAR,

    // OUTPUT
    OUTPUT, OUTPUT_TEXT, OUTPUT_VALUE,

    // VALUE
    VALUE, VALUE_OUTPUT, VALUE_NUMECAR,

    // TEXT
    TEXT, TEXT_RESPONSE, TEXT_STRINGV, 

    // MISCELLANEOUS
    SEPARATOR, OPENPARENTHESIS, CLOSEPARENTHESIS, OPENBRACKET, CLOSEBRACKET, OPENBRACE, CLOSEBRACE, START, END, ASSIGN, DIVIDER, EPSILON, ERROR, EOF, HALT, TRUE, FALSE, AND, OR, NOT, WHILE, IF, THEN, PROCEDURE, GET, RESPONSE, NUMERIC, BOOLEAN, STRINGISH, COLON,
}